@################################################
@#
@# ROS message code generation for C#
@#
@# EmPy template for generating <msg>.cs files
@#
@################################################
@# Start of Template
@#
@# Context:
@#  - file_name_in (String) Source file
@#  - spec (msggen.MsgSpec) Parsed specification of .msg file
@#  - md5sum (String) MD5Sum of the .msg specification
@################################################
@{
import rosidl_generator_cs
import os.path

cs_namespace = 'ROSBridgeLib.%s.'%(package_name)

}@
// Generated by gencs from @(package_name)/@(interface_path)
// DO NOT EDIT THIS FILE BY HAND!

@########################
@# Generic Includes
@########################
using System;
using System.Collections;
using System.Collections.Generic;
using ROSBridgeLib;
using UnityEngine;

@#######################################################################
@# Handle includes
@#######################################################################
@{
from rosidl_parser.definition import Message
from rosidl_parser.definition import AbstractNestedType
from rosidl_parser.definition import NamespacedType

included = []
for message in content.get_elements_of_type(Message):
    for member in message.structure.members:
        type_ = member.type
        if isinstance(type_, AbstractNestedType):
            type_ = type_.value_type
        if isinstance(type_, NamespacedType):
            typename = ('.'.join(type_.namespaces))
            if not typename in included:
                print('using ROSBridgeLib.%s;'%(typename))
                included.append(typename)
}@

namespace ROSBridgeLib {

@#######################################################################
@# Handle message
@#######################################################################
@{
from rosidl_parser.definition import Message
from rosidl_parser.definition import AbstractNestedType
import sys

indent = '    '

for message in content.get_elements_of_type(Message):
    indent_depth = 1
    # namespaces
    for ns in message.structure.namespaced_type.namespaces:
        print(indent * (indent_depth) + 'namespace %s {'%ns)
        indent_depth = indent_depth + 1
    sys.stdout.write('\n')
    
    print(indent * indent_depth + '[System.Serializable]')
    print(indent * indent_depth + 'public class %s : ROSMessage'%str(message.structure.namespaced_type.name))
    print(indent * indent_depth + '{')
    indent_depth = indent_depth + 1
    for member in message.structure.members:
        print(indent * indent_depth + 'public %s %s;'%(rosidl_generator_cs.msg_type_to_cs(member.type), member.name))
    sys.stdout.write('\n')

    if len(message.constants) > 0:
        print(indent * indent_depth + '// Constants:')
    for constant in message.constants:
        print(indent * indent_depth + 'public const %s %s = %s;'%(rosidl_generator_cs.msg_type_to_cs(constant.type), constant.name, rosidl_generator_cs.value_to_cs(constant.type, constant.value)))
    sys.stdout.write('\n')

    #default constructor
    print(indent * indent_depth + 'public %s()'%message.structure.namespaced_type.name)
    print(indent * indent_depth + '{')
    for member in message.structure.members:
        initializer = rosidl_generator_cs.default_value_from_type(member.type)
        if isinstance(member.type, AbstractNestedType):
            initializer = rosidl_generator_cs.array_initializer(member.type)
        elif isinstance(member.type, NamespacedType):
            initializer = "new %s()"%(rosidl_generator_cs.msg_type_to_cs(member.type))
        print(indent * (indent_depth+1) + '%s = %s;'%(member.name, initializer))
    print(indent * indent_depth + '}\n')
    if len(message.structure.members) > 0:
        sys.stdout.write(indent * indent_depth + 'public %s('%message.structure.namespaced_type.name)
        for member in message.structure.members:
            sys.stdout.write('%s _%s'%(rosidl_generator_cs.msg_type_to_cs(member.type), member.name))
            if message.structure.members.index(member) < len(message.structure.members)-1:
                sys.stdout.write(', ')
        sys.stdout.write(')\n')
        print(indent * indent_depth + '{')
        for member in message.structure.members:
            print(indent * (indent_depth+1) + '%s = _%s;'%(member.name, member.name))
        print(indent * indent_depth + '}\n')
    print(indent * indent_depth + 'new public static string GetMessageType()')
    print(indent * indent_depth + '{')
    print(indent * (indent_depth+1) + 'return "%s/%s";'%("/".join(message.structure.namespaced_type.namespaces), message.structure.namespaced_type.name))
    print(indent * indent_depth + '}\n')

    indent_depth = indent_depth - 1
    print(indent * indent_depth + '} // class %s\n'%message.structure.namespaced_type.name)

    # close namespaces
    for ns in reversed(message.structure.namespaced_type.namespaces):
        indent_depth = indent_depth - 1
        print(indent * (indent_depth) + '} // namespace %s'%ns)
}@

@#######################################################################
@# Handle service
@#######################################################################
@{
from rosidl_parser.definition import Message
from rosidl_parser.definition import Service
from rosidl_parser.definition import AbstractNestedType
import sys

indent = '    '

for service in content.get_elements_of_type(Service):
    indent_depth = 1
    # namespaces
    for ns in service.namespaced_type.namespaces:
        print(indent * (indent_depth) + 'namespace %s {'%ns)
        indent_depth = indent_depth + 1
    sys.stdout.write('\n')
    
    print(indent * indent_depth + 'public class %s : ROSBridgeServiceProvider<%s>'%(service.namespaced_type.name, service.request_message.structure.namespaced_type.name))
    print(indent * indent_depth + '{\n')
    indent_depth = indent_depth + 1

    # constructor: Service( serviceName )
    print(indent * indent_depth + 'public %s(string serviceName) : base(serviceName)'%service.namespaced_type.name)
    print(indent * indent_depth + '{')
    print(indent * (indent_depth+1) + '_type = "%s/%s";'%("/".join(service.namespaced_type.namespaces), service.namespaced_type.name))
    print(indent * indent_depth + '}\n')

    # constructor: Service( serviceName, serviceType )
    print(indent * indent_depth + 'public %s(string serviceName, string serviceType = "%s/%s") : base(serviceName, serviceType) {}\n'%(service.namespaced_type.name, "/".join(service.namespaced_type.namespaces), service.namespaced_type.name))

    indent_depth = indent_depth - 1
    print(indent * indent_depth + '} // class %s\n'%service.namespaced_type.name)

    # request class
    if service.request_message:
        print(indent * indent_depth + '[System.Serializable]')
        print(indent * indent_depth + 'public class %s : ServiceArgs'%(service.request_message.structure.namespaced_type.name))
        print(indent * indent_depth + '{')
        indent_depth = indent_depth + 1

        for member in service.request_message.structure.members:
            print(indent * indent_depth + 'public %s %s;'%(rosidl_generator_cs.msg_type_to_cs(member.type), member.name))
        sys.stdout.write('\n')

        if len(service.request_message.constants) > 0:
            print(indent * indent_depth + '// Constants:')
        for constant in service.request_message.constants:
            print(indent * indent_depth + 'public const %s %s = %s;'%(rosidl_generator_cs.msg_type_to_cs(constant.type), constant.name, rosidl_generator_cs.value_to_cs(constant.type, constant.value)))
        sys.stdout.write('\n')

        #default constructor
        print(indent * indent_depth + 'public %s()'%service.request_message.structure.namespaced_type.name)
        print(indent * indent_depth + '{')
        for member in service.request_message.structure.members:
            initializer = rosidl_generator_cs.default_value_from_type(member.type)
            if isinstance(member.type, AbstractNestedType):
                initializer = rosidl_generator_cs.array_initializer(member.type)
            elif isinstance(member.type, NamespacedType):
                initializer = "new %s()"%(rosidl_generator_cs.msg_type_to_cs(member.type))
            print(indent * (indent_depth+1) + '%s = %s;'%(member.name, initializer))
        print(indent * indent_depth + '}\n')
        if len(service.request_message.structure.members) > 0:
            sys.stdout.write(indent * indent_depth + 'public %s('%service.request_message.structure.namespaced_type.name)
            for member in service.request_message.structure.members:
                sys.stdout.write('%s _%s'%(rosidl_generator_cs.msg_type_to_cs(member.type), member.name))
                if service.request_message.structure.members.index(member) < len(service.request_message.structure.members)-1:
                    sys.stdout.write(', ')
            sys.stdout.write(')\n')
            print(indent * indent_depth + '{')
            for member in service.request_message.structure.members:
                print(indent * (indent_depth+1) + '%s = _%s;'%(member.name, member.name))
            print(indent * indent_depth + '}\n')
        print(indent * indent_depth + 'new public static string GetMessageType()')
        print(indent * indent_depth + '{')
        print(indent * (indent_depth+1) + 'return "%s/%s";'%("/".join(service.request_message.structure.namespaced_type.namespaces), service.request_message.structure.namespaced_type.name))
        print(indent * indent_depth + '}\n')

        indent_depth = indent_depth - 1
        print(indent * indent_depth + '} // class %s'%(service.request_message.structure.namespaced_type.name))

    # response class
    if service.response_message:
        print('\n' + indent * indent_depth + '[System.Serializable]')
        print(indent * indent_depth + 'public class %s : ServiceResponse'%(service.response_message.structure.namespaced_type.name))
        print(indent * indent_depth + '{')
        indent_depth = indent_depth + 1

        for member in service.response_message.structure.members:
            print(indent * indent_depth + 'public %s %s;'%(rosidl_generator_cs.msg_type_to_cs(member.type), member.name))
        sys.stdout.write('\n')

        if len(service.response_message.constants) > 0:
            print(indent * indent_depth + '// Constants:')
        for constant in service.response_message.constants:
            print(indent * indent_depth + 'public const %s %s = %s;'%(rosidl_generator_cs.msg_type_to_cs(constant.type), constant.name, constant.value))
        sys.stdout.write('\n')

        #default constructor
        print(indent * indent_depth + 'public %s()'%service.response_message.structure.namespaced_type.name)
        print(indent * indent_depth + '{')
        for member in service.response_message.structure.members:
            initializer = rosidl_generator_cs.default_value_from_type(member.type)
            if isinstance(member.type, AbstractNestedType):
                initializer = rosidl_generator_cs.array_initializer(member.type)
            elif isinstance(member.type, NamespacedType):
                initializer = "new %s()"%(rosidl_generator_cs.msg_type_to_cs(member.type))
            print(indent * (indent_depth+1) + '%s = %s;'%(member.name, initializer))
        print(indent * indent_depth + '}\n')
        if len(service.response_message.structure.members) > 0:
            sys.stdout.write(indent * indent_depth + 'public %s('%service.response_message.structure.namespaced_type.name)
            for member in service.response_message.structure.members:
                sys.stdout.write('%s _%s'%(rosidl_generator_cs.msg_type_to_cs(member.type), member.name))
                if service.response_message.structure.members.index(member) < len(service.response_message.structure.members)-1:
                    sys.stdout.write(', ')
            sys.stdout.write(')\n')
            print(indent * indent_depth + '{')
            for member in service.response_message.structure.members:
                print(indent * (indent_depth+1) + '%s = _%s;'%(member.name, member.name))
            print(indent * indent_depth + '}\n')
        print(indent * indent_depth + 'new public static string GetMessageType()')
        print(indent * indent_depth + '{')
        print(indent * (indent_depth+1) + 'return "%s/%s";'%("/".join(service.response_message.structure.namespaced_type.namespaces), service.response_message.structure.namespaced_type.name))
        print(indent * indent_depth + '}\n')

        indent_depth = indent_depth - 1
        print(indent * indent_depth + '} // class %s\n'%service.response_message.structure.namespaced_type.name)

    # close namespaces
    for ns in reversed(service.namespaced_type.namespaces):
        indent_depth = indent_depth - 1
        print(indent * (indent_depth) + '} // namespace %s'%ns)
}@
@# Done
} // namespace ROSBridgeLib
